/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import Compilador.AnalisadorLexico;
import Compilador.AnalisadorSintatico;
import Compilador.Erro;
import java.awt.Color;
import java.awt.Component;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Style;
import javax.swing.text.StyleContext;

/**
 *
 * @author Gi
 */
public class UIPrincipal extends javax.swing.JFrame {

    StyleContext sc;
    Style defaultStyle;
    DefaultStyledDocument doc;
    JFileChooser jc;

    /**
     * Creates new form UIPrincipal
     */
    public UIPrincipal() {
        initComponents();
        TextLineNumber tln = new TextLineNumber(this.entradaText);
        scrollEntrada.setRowHeaderView(tln);
        this.jc = new JFileChooser("D:\\Users\\Gi\\Desktop\\basicos");
//        sc = new StyleContext();
//        defaultStyle = sc.getStyle(StyleContext.DEFAULT_STYLE);
//        doc = new DefaultStyledDocument(sc);
//        this.entradaText = new JTextPane(doc);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        scrollEntrada = new javax.swing.JScrollPane();
        entradaText = new javax.swing.JTextPane();
        Tab = new javax.swing.JTabbedPane();
        alPanel = new javax.swing.JScrollPane();
        alTable = new javax.swing.JTable();
        asPanel = new javax.swing.JScrollPane();
        asTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        analisarBtn = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menu_abrir = new javax.swing.JMenuItem();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        entradaText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                entradaTextKeyTyped(evt);
            }
        });
        scrollEntrada.setViewportView(entradaText);

        Tab.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        alTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Lexema", "Token", "Linha", "Coluna Inicio", "Coluna Fim"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        alTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        alPanel.setViewportView(alTable);

        Tab.addTab("Analisador Léxico", alPanel);

        asTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Erro", "Mensagem", "Linha", "Coluna"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        asTable.setSelectionForeground(new java.awt.Color(0, 204, 255));
        asPanel.setViewportView(asTable);

        Tab.addTab("Analisador Sintático/Semântico", asPanel);

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, null, new java.awt.Color(102, 255, 102)));

        analisarBtn.setText("Analisar");
        analisarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analisarBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(analisarBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(analisarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenu1.setText("Arquivos");

        menu_abrir.setText("Abrir");
        menu_abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_abrirActionPerformed(evt);
            }
        });
        jMenu1.add(menu_abrir);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Tab, javax.swing.GroupLayout.DEFAULT_SIZE, 802, Short.MAX_VALUE)
                    .addComponent(scrollEntrada)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Tab, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                .addContainerGap())
        );

        Tab.getAccessibleContext().setAccessibleName("aLex");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public String removeHTML(String entrada) {
        entrada = entrada.replaceAll("<html>", "");
        entrada = entrada.replaceAll("</html>", "");
        entrada = entrada.replaceAll("<body>", "");
        entrada = entrada.replaceAll("</body>", "");
        entrada = entrada.replaceAll("<head>", "");
        entrada = entrada.replaceAll("</head>", "");
        entrada = entrada.replaceAll("<b>", "");
        entrada = entrada.replaceAll("</b>", "");

        return entrada;
    }

    public void tabelaAnSintatico(AnalisadorSintatico as) {
        DefaultTableModel model = (DefaultTableModel) this.asTable.getModel();
        ArrayList<Erro> eS = as.getErros();
        model.setRowCount(eS.size());
        int[] erros = new int[eS.size()];

        for (int i = 0; i < eS.size(); i++) {
            model.setValueAt(eS.get(i).getTipo(), i, 0);
            model.setValueAt(eS.get(i).getMsg(), i, 1);
            model.setValueAt(eS.get(i).getLin(), i, 2);
            model.setValueAt(eS.get(i).getCol(), i, 3);

            if(eS.get(i).isWarning()) {
                erros[i] = 2;//Erro
            } else {
                erros[i] = 1;//Aviso
            }

        }

        TableCellRenderer tcr = new tableRender(erros);
        TableColumn column;
        for (int i = 0; i < 4; i++) {
            column = this.asTable.getColumnModel().getColumn(i);
            column.setCellRenderer(tcr);
        }

    }

    private void analisarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analisarBtnActionPerformed
        boolean flagLex, flagSint;
        DefaultTableModel model = (DefaultTableModel) this.alTable.getModel();
        String entrada = this.entradaText.getText();
//        entrada = removeHTML(entrada);
        AnalisadorLexico al = AnalisadorLexico.getInstance();
        al.lex(entrada);
        AnalisadorSintatico as = AnalisadorSintatico.getInstance();
        as.programa();

        tabelaAnSintatico(as);

        String[][] saida = al.toInterface(entrada);
        model.setRowCount(saida.length);

        int erros[] = new int[saida.length];

        for (int i = 0; i < saida.length; i++) {

            model.setValueAt(saida[i][0], i, 0);
            model.setValueAt(saida[i][1], i, 1);
            model.setValueAt(saida[i][2], i, 2);
            model.setValueAt(saida[i][3], i, 3);
            model.setValueAt(saida[i][4], i, 4);

            if (saida[i][1].contains("ERRO")) {
                flagLex = true;
                erros[i] = 1;
            } else {
                erros[i] = 0;
            }

        }

        TableCellRenderer tcr = new tableRender(erros);
        TableColumn column;
        for (int i = 0; i < 5; i++) {
            column = this.alTable.getColumnModel().getColumn(i);
            column.setCellRenderer(tcr);
        }

    }//GEN-LAST:event_analisarBtnActionPerformed

    private void menu_abrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_abrirActionPerformed

        FileNameExtensionFilter filter = new FileNameExtensionFilter("txt", "txt");
        this.jc.setFileFilter(filter);
        int result;
        result = this.jc.showOpenDialog(null);

        if (result == javax.swing.JFileChooser.APPROVE_OPTION) {
            String filename = this.jc.getSelectedFile().getAbsolutePath();
            //jc.setCurrentDirectory(jc.getSelectedFile());
            try {
                BufferedReader in = new BufferedReader(new FileReader(filename));
                String entrada, line;
                entrada = "";
                line = in.readLine();
                while (line != null) {
                    entrada += line + "\r\n";
                    line = in.readLine();
                }

                this.entradaText.setText(entrada);

            } catch (FileNotFoundException ex) {
                Logger.getLogger(UIPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(UIPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_menu_abrirActionPerformed

    private void entradaTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_entradaTextKeyTyped
//        try {
//            Style mainStyle = sc.addStyle("MainStyle", defaultStyle);
//            StyleConstants.setBold(mainStyle, true);
//            Character c = evt.getKeyChar();
//            
//            String text = this.entradaText.getText();
//            
//            doc.setLogicalStyle(0, mainStyle);
//            doc.insertString(0, text, null);
//            doc.setCharacterAttributes(0, text.length(), mainStyle, false);
//            
//        } catch (BadLocationException ex) {
//            Logger.getLogger(UIPrincipal.class.getName()).log(Level.SEVERE, null, ex);
//        }


    }//GEN-LAST:event_entradaTextKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UIPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UIPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UIPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UIPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UIPrincipal().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JScrollPane alPanel;
    private javax.swing.JTable alTable;
    private javax.swing.JButton analisarBtn;
    private javax.swing.JScrollPane asPanel;
    private javax.swing.JTable asTable;
    private javax.swing.JTextPane entradaText;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JMenuItem menu_abrir;
    private javax.swing.JScrollPane scrollEntrada;
    // End of variables declaration//GEN-END:variables
}

class tableRender extends DefaultTableCellRenderer {

    private int erros[];

    public tableRender(int[] erros) {
        this.erros = erros;
        setOpaque(true);
    }

    @Override
    public Component getTableCellRendererComponent(
            JTable table,
            Object value, boolean isSelected, boolean hasFocus,
            int row, int column) {
        super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
        if (this.erros[row] == 1) {
            if (row % 2 == 0) {
                setBackground(Color.RED);
            } //setText(token);
            else {
                setBackground(Color.RED.darker());
            }
        } else if (this.erros[row] == 2) {
            if (row % 2 == 0) {
                setBackground(Color.YELLOW);
            } //setText(token);
            else {
                setBackground(Color.YELLOW.darker());
            }
        } else {
            setBackground(table.getBackground());
        }
        return this;
    }

    @Override
    public void validate() {
    }

    @Override
    public void revalidate() {
    }

    @Override
    protected void firePropertyChange(String propertyName,
            Object oldValue, Object newValue) {
    }

    @Override
    public void firePropertyChange(String propertyName,
            boolean oldValue, boolean newValue) {
    }
}
